<!-- django debugging -->
launch the debugger and create the launch.json file. 
under RUNSERVER input a new argument to specfy the port to be "9000" or any other number port.
WE can set break points when debugging

<!-- Using Django Debug ToolBar -->
After installation
add it to the django settings as : 

1. INSTALLED_APPS = [
    # ...
    "debug_toolbar",
    # ...
]

2. Add the URLs
Add django-debug-toolbar’s URLs to your project’s URLconf:

from django.urls import include, path

urlpatterns = [
    # ...
    path('__debug__/', include('debug_toolbar.urls')),
]
This example uses the __debug__ prefix, but you can use any prefix that doesn’t clash with your application’s URLs.

3. Add the Middleware
The Debug Toolbar is mostly implemented in a middleware. Add it to your MIDDLEWARE setting:

MIDDLEWARE = [
    # ...
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    # ...
]


<!-- DATA MODELING -->
Here we are trying to model data for an ecomerce website

<!-- Product -->
: - title
: - description
: - inventory
<!-- Break down our project -->
<!-- settled into two apps -->
Store --- " Product, collection, customer, cart, cartitem, order, orderitem"
Tags --- " Tag, TaggedItem"

# Creating a one-to-one relationship between the Adress and Customer models.
    customer = models.OneToOneField(Customer, on_delete=models.CASCADE, primary_key=True)
    
# Creating a one-to-many relationship between the Adress and Customer models.
customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    
<!-- Circular dependency -->
where two classes depend on each other

<!-- Generic relationships -->

reverting migrations
===== just delete the code or use git log to revert the commits

using mysql
pip install mysqlclient
connecting ---- mysql -u root -p

managers and querysets
get return a real object

queryset api lookups == check it up